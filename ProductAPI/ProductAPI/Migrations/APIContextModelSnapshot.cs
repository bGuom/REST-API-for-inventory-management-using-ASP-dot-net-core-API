// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductAPI.Models.Context;

namespace ProductAPI.Migrations
{
    [DbContext(typeof(APIContext))]
    partial class APIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProductAPI.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("Type");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.AlertReportMessage", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlertReportObj")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ReportDate");

                    b.HasKey("ReportID");

                    b.ToTable("AlertReports");
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.DeliveryArea", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PolyArray")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("DeliveryID");

                    b.ToTable("DeliveryAreas");
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.Route", b =>
                {
                    b.Property<int>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RouteArray")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("RouteID");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.SalesRep", b =>
                {
                    b.Property<int>("RepID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserID");

                    b.HasKey("RepID");

                    b.ToTable("SalesReps");
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.StockAlert", b =>
                {
                    b.Property<int>("AlertID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("StockID");

                    b.HasKey("AlertID");

                    b.HasIndex("StockID");

                    b.ToTable("StockAlerts");
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.StockDelivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryAreaID");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RouteID");

                    b.Property<int>("SalesRepID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("StockID");

                    b.HasKey("DeliveryID");

                    b.HasIndex("DeliveryAreaID");

                    b.HasIndex("RouteID");

                    b.HasIndex("SalesRepID");

                    b.ToTable("StockDeliveries");
                });

            modelBuilder.Entity("ProductAPI.Models.LogObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EntityID");

                    b.Property<string>("Model");

                    b.Property<string>("Object");

                    b.HasKey("ID");

                    b.ToTable("LogObjects");
                });

            modelBuilder.Entity("ProductAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProductTypeID")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float(50)");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductTypeID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductAPI.Models.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeliveryID");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<string>("Supplier")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Threshold");

                    b.HasKey("StockID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("ProductID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("ProductAPI.Models.ViewModel.ProductType", b =>
                {
                    b.Property<int>("ProductTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TypeName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProductTypeID");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.StockAlert", b =>
                {
                    b.HasOne("ProductAPI.Models.Stock", "Stock")
                        .WithMany("AllAlerts")
                        .HasForeignKey("StockID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductAPI.Models.DBModels.StockDelivery", b =>
                {
                    b.HasOne("ProductAPI.Models.DBModels.DeliveryArea", "DeliveryArea")
                        .WithMany("AllStockDeliveries")
                        .HasForeignKey("DeliveryAreaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductAPI.Models.DBModels.Route", "Route")
                        .WithMany("AllStockDeliveries")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductAPI.Models.DBModels.SalesRep", "SalesRep")
                        .WithMany("AllDeliveries")
                        .HasForeignKey("SalesRepID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductAPI.Models.Product", b =>
                {
                    b.HasOne("ProductAPI.Models.ViewModel.ProductType", "ProductTypeName")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProductAPI.Models.Stock", b =>
                {
                    b.HasOne("ProductAPI.Models.DBModels.StockDelivery", "StockDelivery")
                        .WithMany("AllStocks")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProductAPI.Models.Product", "Product")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
